"use strict";(self.webpackChunksimulo_docs=self.webpackChunksimulo_docs||[]).push([[945],{2018:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>r,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var a=l(4848),t=l(8453);const i={},s="Scene",c={id:"api/Scene",title:"Scene",description:"The Scene global provides fields and functions relating to the Simulo scene.",source:"@site/docs/api/Scene.mdx",sourceDirName:"api",slug:"/api/Scene",permalink:"/api/Scene",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Player",permalink:"/api/Player"},next:{title:"Vec2",permalink:"/api/Vec2"}},d={},o=[{value:"Functions",id:"functions",level:2},{value:":get_physics_name()",id:"get_physics_name",level:3},{value:"Example",id:"example",level:4},{value:":get_physics_version()",id:"get_physics_version",level:3},{value:"Example",id:"example-1",level:4},{value:":add_attachment()",id:"add_attachment",level:3},{value:"Example",id:"example-2",level:4},{value:":add_spring()",id:"add_spring",level:3},{value:"Example",id:"example-3",level:4},{value:":add_hinge()",id:"add_hinge",level:3},{value:"Example",id:"example-4",level:4},{value:":reset()",id:"reset",level:3},{value:":clear()",id:"clear",level:3},{value:":add_bolt()",id:"add_bolt",level:3},{value:"Example",id:"example-5",level:4},{value:":add_phaser()",id:"add_phaser",level:3},{value:"Example",id:"example-6",level:4},{value:":add_fixed_joint()",id:"add_fixed_joint",level:3},{value:"Example",id:"example-7",level:4},{value:":add_audio()",id:"add_audio",level:3},{value:"Example",id:"example-8",level:4},{value:":add_box()",id:"add_box",level:3},{value:"Example",id:"example-9",level:4},{value:":add_circle()",id:"add_circle",level:3},{value:"Example",id:"example-10",level:4},{value:":add_polygon()",id:"add_polygon",level:3},{value:"Example",id:"example-11",level:4},{value:":add_capsule()",id:"add_capsule",level:3},{value:"Example",id:"example-12",level:4},{value:":push_undo()",id:"push_undo",level:3},{value:"Example",id:"example-13",level:4},{value:":get_player()",id:"get_player",level:3},{value:"Example",id:"example-14",level:4},{value:":get_host()",id:"get_host",level:3},{value:"Example",id:"example-15",level:4},{value:":get_object()",id:"get_object",level:3},{value:"Example",id:"example-16",level:4},{value:":get_spring()",id:"get_spring",level:3},{value:"Example",id:"example-17",level:4},{value:":get_hinge()",id:"get_hinge",level:3},{value:"Example",id:"example-18",level:4},{value:":get_bolt()",id:"get_bolt",level:3},{value:"Example",id:"example-19",level:4},{value:":get_phaser()",id:"get_phaser",level:3},{value:"Example",id:"example-20",level:4},{value:":get_fixed_joint()",id:"get_fixed_joint",level:3},{value:"Example",id:"example-21",level:4},{value:":get_audio()",id:"get_audio",level:3},{value:":get_objects_in_circle()",id:"get_objects_in_circle",level:3},{value:"Example",id:"example-22",level:4},{value:":raycast()",id:"raycast",level:3},{value:"Example",id:"example-23",level:4},{value:":get_objects_in_box()",id:"get_objects_in_box",level:3},{value:"Example",id:"example-24",level:4},{value:":get_attachments_in_circle()",id:"get_attachments_in_circle",level:3},{value:"Example",id:"example-25",level:4},{value:":get_attachments_in_box()",id:"get_attachments_in_box",level:3},{value:"Example",id:"example-26",level:4},{value:":get_all_objects()",id:"get_all_objects",level:3},{value:"Example",id:"example-27",level:4},{value:":get_all_springs()",id:"get_all_springs",level:3},{value:"Example",id:"example-28",level:4},{value:":get_all_hinges()",id:"get_all_hinges",level:3},{value:"Example",id:"example-29",level:4},{value:":get_all_bolts()",id:"get_all_bolts",level:3},{value:"Example",id:"example-30",level:4},{value:":get_all_phasers()",id:"get_all_phasers",level:3},{value:"Example",id:"example-31",level:4},{value:":get_all_fixed_joints()",id:"get_all_fixed_joints",level:3},{value:"Example",id:"example-32",level:4},{value:":get_all_players()",id:"get_all_players",level:3},{value:"Example",id:"example-33",level:4},{value:":get_component()",id:"get_component",level:3},{value:"Example",id:"example-34",level:4},{value:":get_attachment()",id:"get_attachment",level:3},{value:"Example",id:"example-35",level:4},{value:":get_all_components()",id:"get_all_components",level:3},{value:"Example",id:"example-36",level:4},{value:":get_all_attachments()",id:"get_all_attachments",level:3},{value:"Example",id:"example-37",level:4},{value:":add_component_def()",id:"add_component_def",level:3},{value:"Example",id:"example-38",level:4},{value:":get_ambient_light_color()",id:"get_ambient_light_color",level:3},{value:"Example",id:"example-39",level:4},{value:":set_ambient_light_color()",id:"set_ambient_light_color",level:3},{value:"Example",id:"example-40",level:4},{value:":get_ambient_light_intensity()",id:"get_ambient_light_intensity",level:3},{value:"Example",id:"example-41",level:4},{value:":set_ambient_light_intensity()",id:"set_ambient_light_intensity",level:3},{value:"Example",id:"example-42",level:4},{value:":set_bloom()",id:"set_bloom",level:3},{value:"Example",id:"example-43",level:4},{value:":get_bloom()",id:"get_bloom",level:3},{value:"Example",id:"example-44",level:4},{value:":get_background_color()",id:"get_background_color",level:3},{value:"Example",id:"example-45",level:4},{value:":set_background_color()",id:"set_background_color",level:3},{value:"Example",id:"example-46",level:4},{value:":get_gravity()",id:"get_gravity",level:3},{value:"Example",id:"example-47",level:4},{value:":set_gravity()",id:"set_gravity",level:3},{value:"Example",id:"example-48",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"scene",children:"Scene"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Scene"})," global provides fields and functions relating to the Simulo scene."]}),"\n",(0,a.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Make sure to use ",(0,a.jsx)(n.code,{children:":function()"})," and not ",(0,a.jsx)(n.code,{children:".function()"}),", or you'll get an error"]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_physics_name",children:":get_physics_name()"}),"\n",(0,a.jsx)(n.p,{children:'Gets the name of the current physics engine, such as "Box2D" or "Rapier".'}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"print(Scene:get_physics_name());\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_physics_version",children:":get_physics_version()"}),"\n",(0,a.jsx)(n.p,{children:'Gets the version of the current physics engine, such as "3.1.0".'}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"print(Scene:get_physics_version());\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_attachment",children:":add_attachment()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new attachment to the scene. They can either be attached to objects or to the background."}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'Scene:add_attachment({\n    parent = nil, -- attached to background / scene\n    local_position = vec2(0, 1), -- usually relative to object, but in this case is world position since on background\n    local_angle = 0.1,\n    -- optionally, we can add images (you don\'t need images field)\n    images = {\n        {\n            -- We only need the texture, every other field in `images` is optional and has the defaults you\'d expect.\n            texture = require(\'core/assets/textures/point_light.png\'),\n            \n            color = 0xffa0a0,\n            offset = vec2(0.5, 0.5),\n            angle = 0.1,\n            flip_x = false,\n            flip_y = true,\n            filtering = "linear", -- change to "nearest" for pixel art, otherwise it\'ll be blurry\n            scale = vec2(1.1, 1.1),\n        },\n    },\n    -- we can also optionally add lights\n    lights = {\n        {\n            -- These don\'t have defaults\n            intensity = 1,\n            radius = 0.5,\n            color = 0xffffff,\n\n            -- But these do:\n            falloff = 0.3,\n            offset = vec2(0.5, 0.5),\n        },\n    },\n    -- optional text too\n    texts = {\n        {\n            -- We need at least content if we want text\n            content = "Hii omg",\n\n            -- But the rest have defaults\n            color = 0xffa0a0,\n            offset = vec2(0.5, 0.5),\n            angle = 0.4,\n            font_size = 1,\n            font_resolution = 20,\n            \n            -- can\'t set font yet! sorry\n        },\n    },\n    use_world_angle = false, -- this isn\'t finished and is somewhat broken (you can still try it) but it makes local angle use world instead of relative to parent\n\n    -- everything has defaults fr\n\n    -- other than this. to know how use that, look at `add_component_def` docs, on this same page\n    component = {\n        name = "Attachment type name, like Hinge, just, the name of your thing",\n        version = "0.1.0",\n        id = "@you/package/the_the",\n        properties = {\n            {\n                id = "something",\n                name = "Something idk",\n                input_type = "slider",\n                default_value = 100,\n                min_value = 0,\n                max_value = 200,\n            },\n        },\n    },\n    -- the attachment component is a special type of component\n    -- where it is part of attachment itself and cant be removed\n    -- and in UI it shows up Above components list\n});\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_spring",children:":add_spring()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new spring to the scene. It can be between two objects, or between an object and the background."}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_spring({\n    object_a = box,\n    object_b = nil, -- one end on background\n    rest_length = 5,\n    stiffness = 10,\n    damping = 0.3,\n    local_anchor_b = vec2(0, 0.5), -- since object B is background, this is world space\n    -- we could also set local_anchor_a\n    collide_connected = false, -- defaults to `true` on springs\n    attachment = attachment, -- attachment to attach spring to\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_hinge",children:":add_hinge()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new hinge to the scene. It can be between two objects, or between an object and the background."}),"\n",(0,a.jsxs)(n.p,{children:["You should typically use the ",(0,a.jsx)(n.code,{children:"core"})," ",(0,a.jsx)(n.code,{children:"hinge"})," function instead, since if you use ",(0,a.jsx)(n.code,{children:"Scene:add_hinge"}),", there won't be a visible hinge the user can remove. On the other hand, ",(0,a.jsx)(n.code,{children:"core"}),"'s ",(0,a.jsx)(n.code,{children:"hinge"})," adds same thing as the hinge tool. You can even make it invisible if you want."]}),"\n",(0,a.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_hinge({\n    object_a = box,\n    object_b = nil, -- one end on background\n    motor_enabled = true,\n    motor_speed = 0.3,\n    max_motor_torque = 10,\n    local_anchor_b = vec2(0, 0.5), -- since object B is background, this is world space\n    -- we could also set local_anchor_a and collide_connected\n    attachment = attachment, -- attachment to attach hinge to\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"reset",children:":reset()"}),"\n",(0,a.jsx)(n.p,{children:"Resets the scene to the default state, adding a ground and all that"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"clear",children:":clear()"}),"\n",(0,a.jsx)(n.p,{children:"Clears the scene, removing all objects and attachments, but keeping the background color and ambient light etc"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_bolt",children:":add_bolt()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new bolt to the scene. It can be between two objects, or between an object and the background."}),"\n",(0,a.jsxs)(n.p,{children:["You should typically use the ",(0,a.jsx)(n.code,{children:"core"})," ",(0,a.jsx)(n.code,{children:"bolt"})," function instead, since if you use ",(0,a.jsx)(n.code,{children:"Scene:add_bolt"}),", there won't be a visible bolt the user can remove. On the other hand, ",(0,a.jsx)(n.code,{children:"core"}),"'s ",(0,a.jsx)(n.code,{children:"bolt"})," adds same thing as the bolt tool. You can even make it invisible if you want."]}),"\n",(0,a.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_bolt({\n    object_a = box,\n    object_b = nil, -- one end on background\n    local_anchor_a = vec2(0.5, 0.5),\n    local_anchor_b = vec2(1, 0), -- since object B is background, this is world space\n    reference_angle = 0.1, -- what difference in angle should there be between the two after bolt\n    attachment = attachment, -- attachment to attach bolt to\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_phaser",children:":add_phaser()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new phaser to the scene. It must be between two objects. It'll diable collision between the two until the phaser is destroyed."}),"\n",(0,a.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_phaser({\n    object_a = box,\n    object_b = box2,\n    attachment = attachment, -- attachment to attach phaser to\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_fixed_joint",children:":add_fixed_joint()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new fixed joint to the scene. It can be between two objects, or between an object and the background."}),"\n",(0,a.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_fixed_joint({\n    object_a = box,\n    object_b = nil, -- one end on background\n    local_anchor_b = vec2(0, 0.5), -- since object B is background, this is world space\n    -- we could also set local_anchor_a and collide_connected\n    attachment = attachment, -- attachment to attach fixed joint to\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_audio",children:":add_audio()"}),"\n",(0,a.jsx)(n.p,{children:"Adds an audio player to the scene. Wow!"}),"\n",(0,a.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'Scene:add_audio({\n    position = vec2(0, 0),\n    asset = "path/to/audio.ogg",\n    -- we can also set pitch and volume but they default to 1\n    -- we can also omit position since it defaults to 0,0\n});\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_box",children:":add_box()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new object to the scene with a rectangle shape."}),"\n",(0,a.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_box({\n    position = vec2(0, 0),\n    size = vec2(1, 1), -- meters\n    body_type = BodyType.Static, -- doesnt move\n    color = Color:rgb(1, 0.1, 0.1), -- red\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_circle",children:":add_circle()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new object to the scene with a circle shape."}),"\n",(0,a.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_circle({\n    position = vec2(0, 0),\n    radius = 1, -- meters\n    body_type = BodyType.Static, -- doesnt move\n    color = Color:rgb(1, 0.1, 0.1), -- red\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_polygon",children:":add_polygon()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new object to the scene with a polygon shape."}),"\n",(0,a.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_polygon({\n    position = vec2(0, 0),\n    points = {\n        vec2(0, 0),\n        vec2(1, 0),\n        vec2(0, 1),\n    },\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_capsule",children:":add_capsule()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a new object to the scene with a capsule shape."}),"\n",(0,a.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:add_capsule({\n    position = vec2(0, 0),\n    radius = 1, -- meters\n    local_point_a = vec2(0, 0.5),\n    local_point_b = vec2(0, -0.5),\n    body_type = BodyType.Static, -- doesnt move\n    color = Color:rgb(1, 0.1, 0.1), -- red\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"push_undo",children:":push_undo()"}),"\n",(0,a.jsxs)(n.p,{children:["Add an entry to the undo history of the scene. Tools should do this ",(0,a.jsx)(n.em,{children:"after"})," any changes to the scene."]}),"\n",(0,a.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Wow my tool just finished destroying thousands of creations.\n-- Now let us save this glorious achievement for the future generations.\n\nScene:push_undo();\n\n-- Now when they CTRL+Z itll that.\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_player",children:":get_player()"}),"\n",(0,a.jsxs)(n.p,{children:["Gets a ",(0,a.jsx)(n.a,{href:"/api/Player",children:"player"})," by its ID, or nil if there's none of that ID"]}),"\n",(0,a.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local player = Scene:get_player(0); -- ID 0 is always the host. We can also use Scene:get_host()\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_host",children:":get_host()"}),"\n",(0,a.jsx)(n.p,{children:"Gets the player who is hosting the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-15",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local player = Scene:get_host();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_object",children:":get_object()"}),"\n",(0,a.jsx)(n.p,{children:"Gets an object by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-16",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local object = Scene:get_object(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_spring",children:":get_spring()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a spring by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-17",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local spring = Scene:get_spring(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_hinge",children:":get_hinge()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a hinge by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-18",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local hinge = Scene:get_hinge(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_bolt",children:":get_bolt()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a bolt by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-19",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local bolt = Scene:get_bolt(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_phaser",children:":get_phaser()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a phaser by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-20",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local phaser = Scene:get_phaser(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_fixed_joint",children:":get_fixed_joint()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a fixed joint by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-21",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local fixed_joint = Scene:get_fixed_joint(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_audio",children:":get_audio()"}),"\n",(0,a.jsx)(n.p,{children:"Gets an Audio!!"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_objects_in_circle",children:":get_objects_in_circle()"}),"\n",(0,a.jsxs)(n.p,{children:["Gets a list of objects which overlap a circle. Allows passing a radius of ",(0,a.jsx)(n.code,{children:"0."})," for getting objects that overlap a point."]}),"\n",(0,a.jsx)(n.h4,{id:"example-22",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local objects = Scene:get_objects_in_circle({\n    position = vec2(0, 0),\n    radius = 1,\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"raycast",children:":raycast()"}),"\n",(0,a.jsx)(n.p,{children:"I forgot how explain what raycast is but its super useful. Its like a laser and itll tell you what it hits"}),"\n",(0,a.jsx)(n.h4,{id:"example-23",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local hits = Scene:raycast({\n    origin = vec2(0, 0), -- where to start the ray\n    direction = vec2(1, 1), -- direction of the ray, itll be normalized probably\n    distance = 1000, -- how long before it gives up on everything in life\n    closest_only = true, -- if false it should get the everything along the way (nothing is tested in this insane game)\n});\n\n-- each hit is a table, it has:\n--   - object\n--   - point (vec2)\n--   - normal (vec2, like the reflection of the ray on the surface it hit)\n--   - fraction (how far along the distance the hit was, from 0 to 1)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_objects_in_box",children:":get_objects_in_box()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a list of objects which overlap a box."}),"\n",(0,a.jsx)(n.h4,{id:"example-24",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local objects = Scene:get_objects_in_box({\n    position = vec2(0, 0),\n    size = vec2(1, 1),\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_attachments_in_circle",children:":get_attachments_in_circle()"}),"\n",(0,a.jsxs)(n.p,{children:["Gets a list of attachments which overlap a circle. Allows passing a radius of ",(0,a.jsx)(n.code,{children:"0."})," for getting attachments that overlap a point."]}),"\n",(0,a.jsx)(n.p,{children:"Note: this is currently done really shittily, in final thing itll do it properly but for now it just loops over all attachments and checks how close position is"}),"\n",(0,a.jsx)(n.h4,{id:"example-25",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local attachments = Scene:get_attachments_in_circle({\n    position = vec2(0, 0),\n    radius = 1,\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_attachments_in_box",children:":get_attachments_in_box()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a list of attachments which overlap a box."}),"\n",(0,a.jsx)(n.h4,{id:"example-26",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local attachments = Scene:get_attachments_in_box({\n    position = vec2(0, 0),\n    size = vec2(1, 1),\n});\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_objects",children:":get_all_objects()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the objects in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-27",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local objects = Scene:get_all_objects();\n\n-- loop through all objects\nfor _, object in ipairs(objects) do\n    print(object.id);\nend;\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_springs",children:":get_all_springs()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the springs in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-28",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local springs = Scene:get_all_springs();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_hinges",children:":get_all_hinges()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the hinges in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-29",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local hinges = Scene:get_all_hinges();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_bolts",children:":get_all_bolts()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the bolts in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-30",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local bolts = Scene:get_all_bolts();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_phasers",children:":get_all_phasers()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the phasers in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-31",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local phasers = Scene:get_all_phasers();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_fixed_joints",children:":get_all_fixed_joints()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the fixed joints in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-32",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local fixed_joints = Scene:get_all_fixed_joints();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_players",children:":get_all_players()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the players in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-33",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local players = Scene:get_all_players();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_component",children:":get_component()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a component by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-34",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local component = Scene:get_component(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_attachment",children:":get_attachment()"}),"\n",(0,a.jsx)(n.p,{children:"Gets a attachment by its ID, or nil if there's none of that ID"}),"\n",(0,a.jsx)(n.h4,{id:"example-35",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local attachment = Scene:get_attachment(0);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_components",children:":get_all_components()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the components in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-36",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local components = Scene:get_all_components();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_all_attachments",children:":get_all_attachments()"}),"\n",(0,a.jsx)(n.p,{children:"Gets all the attachments in the scene"}),"\n",(0,a.jsx)(n.h4,{id:"example-37",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local attachments = Scene:get_all_attachments();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"add_component_def",children:":add_component_def()"}),"\n",(0,a.jsxs)(n.p,{children:["Add a new component definition to the scene, that you can then add instances of on objects. You add it on objects with ",(0,a.jsx)(n.code,{children:":add_component({ hash = hash });"}),", though there are also optional ",(0,a.jsx)(n.code,{children:"saved_data"})," and ",(0,a.jsx)(n.code,{children:"properties"})," fields"]}),"\n",(0,a.jsx)(n.h4,{id:"example-38",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local hash = scene:add_component_def({\n    name = "Player",\n    version = "0.1.0",\n    id = "@you/package/player",\n    category = "Miscellaneous",\n\n    -- We can optionally add some settings for the component, shown in right-click menu:\n    properties = {\n        -- The order of these is the order they\'ll be shown in the right-click menu\n        {\n            -- The ID is what we\'ll use in `:get_property` and `:set_property`\n            id = "health",\n            -- Display name, seen in right-click\n            name = "Health",\n            -- We support "slider", "text", "color", and "toggle". Soon we will have way more\n            input_type = "slider",\n\n            -- For sliders, these are the settings\n            default_value = 100,\n            min_value = 0,\n            max_value = 200,\n\n            -- For color, we have just `default_value`\n            -- For text, we have `default_value` and `multi_line` (set it to true or false)\n            -- For toggles it\'s just `default_value`.\n\n            -- There\'s also "button" input type, untested though. It has just `event` field, it\'l call `:send_event` on the object. Get that from `on_event` in your components\n        },\n    }\n});\n\nobject:add_component({\n    hash = hash,\n});\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_ambient_light_color",children:":get_ambient_light_color()"}),"\n",(0,a.jsx)(n.p,{children:"Gets the ambient light color"}),"\n",(0,a.jsx)(n.h4,{id:"example-39",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local color = Scene:get_ambient_light_color();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"set_ambient_light_color",children:":set_ambient_light_color()"}),"\n",(0,a.jsx)(n.p,{children:"Sets the ambient light color"}),"\n",(0,a.jsx)(n.h4,{id:"example-40",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:set_ambient_light_color(0xff0000);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_ambient_light_intensity",children:":get_ambient_light_intensity()"}),"\n",(0,a.jsx)(n.p,{children:"Gets the ambient light intensity"}),"\n",(0,a.jsx)(n.h4,{id:"example-41",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local intensity = Scene:get_ambient_light_intensity();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"set_ambient_light_intensity",children:":set_ambient_light_intensity()"}),"\n",(0,a.jsx)(n.p,{children:"Sets the ambient light intensity"}),"\n",(0,a.jsx)(n.h4,{id:"example-42",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:set_ambient_light_intensity(0.5);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"set_bloom",children:":set_bloom()"}),"\n",(0,a.jsx)(n.p,{children:"Sets the bloom"}),"\n",(0,a.jsx)(n.h4,{id:"example-43",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:set_bloom(true);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_bloom",children:":get_bloom()"}),"\n",(0,a.jsx)(n.p,{children:"Gets the bloom"}),"\n",(0,a.jsx)(n.h4,{id:"example-44",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local bloom = Scene:get_bloom();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_background_color",children:":get_background_color()"}),"\n",(0,a.jsx)(n.p,{children:"Gets the background color"}),"\n",(0,a.jsx)(n.h4,{id:"example-45",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local color = Scene:get_background_color();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"set_background_color",children:":set_background_color()"}),"\n",(0,a.jsx)(n.p,{children:"Sets the background color"}),"\n",(0,a.jsx)(n.h4,{id:"example-46",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:set_background_color(0xff0000);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get_gravity",children:":get_gravity()"}),"\n",(0,a.jsx)(n.p,{children:"Gets gravity"}),"\n",(0,a.jsx)(n.h4,{id:"example-47",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local gravity = Scene:get_gravity();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"set_gravity",children:":set_gravity()"}),"\n",(0,a.jsx)(n.p,{children:"Sets the gravity"}),"\n",(0,a.jsx)(n.h4,{id:"example-48",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"Scene:set_gravity(vec2(0, 0));\n"})})]})}function r(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>c});var a=l(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);