"use strict";(self.webpackChunksimulo_docs=self.webpackChunksimulo_docs||[]).push([[2386],{4275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>a});var o=t(4848),s=t(8453);const i={},l="Multi-File",r={id:"samples/components/multifile",title:"Multi-File",description:"Instead of writing the component code inline in our Script Box script, we can use the temploadstring global:",source:"@site/docs/samples/components/multifile.mdx",sourceDirName:"samples/components",slug:"/samples/components/multifile",permalink:"/docs/samples/components/multifile",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"samplesSidebar",previous:{title:"Components",permalink:"/docs/category/components"},next:{title:"Platformer",permalink:"/docs/samples/components/platformer"}},c={},a=[];function m(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"multi-file",children:"Multi-File"}),"\n",(0,o.jsxs)(n.p,{children:["Instead of writing the component code inline in our Script Box script, we can use the ",(0,o.jsx)(n.code,{children:"temp_load_string"})," global:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",metastring:'title="Script Box script"',children:'reset(); -- Add `reset` function from the samples so this works\n\nlocal box = Scene:add_box({\n    position = vec2(2, -19.5),\n    size = vec2(0.5, 0.5),\n    is_static = false,\n    color = 0xa0a0ff,\n});\n\nprint(box.guid);\n\nlocal hash = Scene:add_component({\n    name = "Multi-File Example",\n    id = "@amytimed/test/multifile_example",\n    version = "0.2.0",\n    code = temp_load_string(\'/some/path/to/component.lua\')\n});\n\nbox:add_component(hash);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And then, in ",(0,o.jsx)(n.code,{children:"component.lua"})," (which we defined a path to earlier):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",metastring:'title="component.lua"',children:"function on_start()\n    -- random rgb color\n    local r = math.random(0x40, 0xff);\n    local g = math.random(0x40, 0xff);\n    local b = math.random(0x40, 0xff);\n\n    -- put it together to form single color value, like 0xRRGGBB\n    self.color = r * 0x10000 + g * 0x100 + b;\nend;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now, if we paste the first script into the Script Box and run it, it'll load the script defined in component.lua. Each time we press run, it'll reset the scene and create a box which sets its color to a random one."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);