"use strict";(self.webpackChunksimulo_docs=self.webpackChunksimulo_docs||[]).push([[434],{4191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>r});var o=t(4848),s=t(8453);const i={},l="Component",a={id:"api/Component",title:"Component",description:"Components are scripts you place on objects or attachments in Simulo. They're very powerful and allow doing almost anything with scripting, even creating entire games in Simulo.",source:"@site/docs/api/Component.mdx",sourceDirName:"api",slug:"/api/Component",permalink:"/api/Component",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Color",permalink:"/api/Color"},next:{title:"Gizmos",permalink:"/api/Gizmos"}},d={},r=[{value:"Creating Components From Lua",id:"creating-components-from-lua",level:2},{value:"Components As Files",id:"components-as-files",level:2},{value:"Later We Will Have UI",id:"later-we-will-have-ui",level:2},{value:"Events",id:"events",level:2},{value:"on_start",id:"on_start",level:3},{value:"on_save",id:"on_save",level:3},{value:"on_update",id:"on_update",level:3},{value:"on_step",id:"on_step",level:3},{value:"on_event",id:"on_event",level:3},{value:"on_collision_start",id:"on_collision_start",level:3},{value:"on_collision_end",id:"on_collision_end",level:3},{value:"on_sensor_enter",id:"on_sensor_enter",level:3},{value:"on_sensor_exit",id:"on_sensor_exit",level:3},{value:"on_hit",id:"on_hit",level:3},{value:"on_destroy",id:"on_destroy",level:3},{value:"Fields",id:"fields",level:2},{value:".id",id:"id",level:3},{value:".hash",id:"hash",level:3},{value:"Functions",id:"functions",level:2},{value:":destroy()",id:"destroy",level:3},{value:":is_destroyed()",id:"is_destroyed",level:3},{value:":get_property()",id:"get_property",level:3},{value:":get_properties()",id:"get_properties",level:3},{value:":set_property()",id:"set_property",level:3},{value:"Example",id:"example",level:4},{value:":send_event()",id:"send_event",level:3},{value:"Example",id:"example-1",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Type:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Type",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"component",children:"Component"}),"\n",(0,o.jsx)(n.p,{children:"Components are scripts you place on objects or attachments in Simulo. They're very powerful and allow doing almost anything with scripting, even creating entire games in Simulo."}),"\n",(0,o.jsx)(n.h2,{id:"creating-components-from-lua",children:"Creating Components From Lua"}),"\n",(0,o.jsxs)(n.p,{children:["From component code, you can use the ",(0,o.jsx)(n.a,{href:"/api/Scene",children:(0,o.jsx)(n.code,{children:"Scene"})})," global to perform most tasks. You also have the ",(0,o.jsx)(n.code,{children:"self"})," variable, which is set to the object/attachment the component is on."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local box = Scene:add_box({\n    position = vec2(0, 0),\n    size = vec2(0.5, 0.5),\n    color = 0xe5d3b9,\n});\n\nlocal hash = Scene:add_component_def({\n    name = "Player",\n    id = "@amytimed/test/player",\n    version = "0.2.0",\n\n    -- Lua/Luau code to make box "jump" when we press W key\n    script = {\n        lang = "lua",\n        code = [[\n            local host = Scene:get_player(0);\n\n            function on_update()\n                if host:key_just_pressed("W") then\n                    self:apply_linear_impulse_to_center(vec2(0, 1));\n                end;\n            end;\n        ]],\n    },\n});\n\nbox:add_component({ hash = hash }); -- We can reuse the hash on other objects\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You simply add a new component to the scene with ",(0,o.jsx)(n.code,{children:"Scene:add_component_def"}),", which returns a hash. You can then use ",(0,o.jsx)(n.code,{children:":add_component({ hash = hash })"})," on objects to apply the script on them."]}),"\n",(0,o.jsx)(n.h2,{id:"components-as-files",children:"Components As Files"}),"\n",(0,o.jsxs)(n.p,{children:["If you go into your Simulo folder (",(0,o.jsx)(n.strong,{children:"File"})," \u2192 ",(0,o.jsx)(n.strong,{children:"Open Simulo Folder"}),"), and go into ",(0,o.jsx)(n.code,{children:"components"})," folder, you can create a new folder there. You should pick a nice lowercase name, with underscores instead of spaces, like ",(0,o.jsx)(n.code,{children:"my_component"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, add a new file there named ",(0,o.jsx)(n.code,{children:"component.toml"}),". If you're on Windows, you'll need to enable viewing file extensions, see ",(0,o.jsx)(n.a,{href:"https://support.microsoft.com/en-us/windows/common-file-name-extensions-in-windows-da4a4430-8e76-89c5-59f7-1cdbbc75cb01",children:"this page"}),". If you're on Mac, use ",(0,o.jsx)(n.a,{href:"https://support.apple.com/en-ca/guide/mac-help/mchlp2304/mac",children:"this guide"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Put this in the file:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[component]\nname = "Cool Name"\nversion = "0.1.0"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now make a ",(0,o.jsx)(n.code,{children:"src"})," folder, and put in a ",(0,o.jsx)(n.code,{children:"main.lua"}),". Inside it, put this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local host = Scene:get_player(0);\n\nfunction on_update()\n    if host:key_just_pressed("W") then\n        self:apply_linear_impulse_to_center(vec2(0, 1));\n    end;\nend;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now just reopen Simulo Simulator, and when you click ",(0,o.jsx)(n.code,{children:"Add Component"})," on something, you should see your component. Put it on a box (make sure it's not too heavy) and press W."]}),"\n",(0,o.jsxs)(n.p,{children:["But now, how do I add Settings to my component, in the right-click? Well you can just add this at the end of the ",(0,o.jsx)(n.code,{children:"component.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[[property]]\nid = "jump_force"\n\nname = "Jump Force"\n\ninput_type = "slider"\n\ndefault_value = 1.0\nmin_value = 0.1\nmax_value = 10.0\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now, in ",(0,o.jsx)(n.code,{children:"main.lua"}),", replace this line:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'- self:apply_linear_impulse_to_center(vec2(0, 1));\n+ self:apply_linear_impulse_to_center(vec2(0, self_component:get_property("jump_force").value));\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now if you save those and restart the game, and add it to a new box, you should see Settings for the component when you right-click and hover over it! If you change it, it should affect how high it jumps."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Component Settings",src:t(8098).A+"",width:"867",height:"343"})}),"\n",(0,o.jsx)(n.h2,{id:"later-we-will-have-ui",children:"Later We Will Have UI"}),"\n",(0,o.jsx)(n.p,{children:"Eventually, the in-game script box will become a pretty good scripting editor where you can make components right there. Wow! But for now you can just use above ways."}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsxs)(n.p,{children:["Components have ",(0,o.jsx)(n.strong,{children:"event handler"})," functions which are called at certain times, such as ",(0,o.jsx)(n.code,{children:"on_update"}),", which is called each time the physics is updated."]}),"\n",(0,o.jsx)(n.h3,{id:"on_start",children:"on_start"}),"\n",(0,o.jsxs)(n.p,{children:["This is called when the component is started. It has a ",(0,o.jsx)(n.code,{children:"saved_data"})," argument. When the ",(0,o.jsx)(n.code,{children:"on_save"})," event is called, you can return some data, which will then be passed back into your ",(0,o.jsx)(n.code,{children:"on_start"})," once you load the saved thing."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"local my_data = nil;\n\nfunction on_start(saved_data)\n    my_data = saved_data;\nend;\n\nfunction on_save()\n    return my_data;\nend;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"on_save",children:"on_save"}),"\n",(0,o.jsxs)(n.p,{children:["As explained in previous section, this is called when we save the component, and what you return here is passed to ",(0,o.jsx)(n.code,{children:"on_start"})," when it starts back up."]}),"\n",(0,o.jsx)(n.h3,{id:"on_update",children:"on_update"}),"\n",(0,o.jsx)(n.p,{children:"This is called all the time, even when paused. Listen to it like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_update()\n    -- do stuff all the time here\nend;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"on_step",children:"on_step"}),"\n",(0,o.jsxs)(n.p,{children:["This is called each time the physics is updated, so only when unpaused. This is currently ",(0,o.jsx)(n.code,{children:"64"})," times per second."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_step()\n    -- do stuff here\nend;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also take a ",(0,o.jsx)(n.code,{children:"time_step"})," argument, which will be equal to ",(0,o.jsx)(n.code,{children:"1.0 / 64.0"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"on_event",children:"on_event"}),"\n",(0,o.jsxs)(n.p,{children:["This function is called whenever there's a ",(0,o.jsx)(n.code,{children:":send_event"})," called on the object/attachment or its components. It gets two parameters: an event ID, and the data of the event."]}),"\n",(0,o.jsx)(n.p,{children:"You can listen to it like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function on_event(id, data)\n    if id == "property_changed" then -- this is an event sent by Simulo itself\n        -- my component properties changed omg\n        -- (do something here idk)\n    elseif id == "some_custom_event" then\n        -- if we do `:send_event("some_custom_event", "wow omg")`, then this code will run, with `data` set to `"wow omg"`\n        print(data);\n    end;\nend;\n'})}),"\n",(0,o.jsx)(n.h3,{id:"on_collision_start",children:"on_collision_start"}),"\n",(0,o.jsxs)(n.p,{children:["When it starts touching something. If it started touching it before the component was started, you won't get this, so use ",(0,o.jsx)(n.code,{children:"object:get_touching()"})," if you're looking to see everything."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_collision_start(data)\n    -- we have data.other (object)\n    -- and data.points. latter isnt the most reliable\nend;\n"})}),"\n",(0,o.jsx)(n.p,{children:"It might give you an on_collision_start before they start touching. This is because Box2D is haunted"}),"\n",(0,o.jsx)(n.h3,{id:"on_collision_end",children:"on_collision_end"}),"\n",(0,o.jsxs)(n.p,{children:["When it stops touching and returns to isolation, we get this. It has a ",(0,o.jsx)(n.code,{children:"data"})," too but only ",(0,o.jsx)(n.code,{children:"data.other"}),", not points"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_collision_end(data)\n    -- data.other is the other obj\nend;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"on_sensor_enter",children:"on_sensor_enter"}),"\n",(0,o.jsxs)(n.p,{children:["Behold the untested sensorizing. When you add a shape, set ",(0,o.jsx)(n.code,{children:"is_sensor = true"}),". Now it won't collide normally it's just a sensor. Wow! I don't know if it'll even let you drag it, so be carefuls I guess"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_sensor_enter(other)\n    -- called only on the sensor itself\nend;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You should use ",(0,o.jsx)(n.code,{children:"sensor:get_sensed()"})," to get all the objects it's sensing."]}),"\n",(0,o.jsx)(n.h3,{id:"on_sensor_exit",children:"on_sensor_exit"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_sensor_exit(other)\n    -- Wow!\nend;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"on_hit",children:"on_hit"}),"\n",(0,o.jsxs)(n.p,{children:["This one is really cools. It gets a ",(0,o.jsx)(n.code,{children:"data"})," with ",(0,o.jsx)(n.code,{children:"data.other"}),", ",(0,o.jsx)(n.code,{children:"data.point"}),", ",(0,o.jsx)(n.code,{children:"data.normal"}),", ",(0,o.jsx)(n.code,{children:"data.approach_speed"}),". Who knows if it works"]}),"\n",(0,o.jsx)(n.p,{children:"You could use it for making collision sounds before me"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function on_hit(data)\n    -- aforementioned properties available here\nend;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"on_destroy",children:"on_destroy"}),"\n",(0,o.jsx)(n.p,{children:"This function is called when the object is about to be destroyed. When it is called, the object is still completely intact."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function on_destroy()\n    print("I am going to die");\nend;\n'})}),"\n",(0,o.jsx)(n.h1,{id:"component-api",children:"Component API"}),"\n",(0,o.jsxs)(n.p,{children:["In a component, we have the ",(0,o.jsx)(n.code,{children:"self_component"})," variable. This is similar to ",(0,o.jsx)(n.code,{children:"self"}),", but instead of being the object/attachment, it's the component itself."]}),"\n",(0,o.jsxs)(n.p,{children:["We can use it to get the component properties. We can also obtain these from ",(0,o.jsx)(n.code,{children:"Scene:get_component"}),", and ",(0,o.jsx)(n.code,{children:":destroy()"})," them, or call ",(0,o.jsx)(n.code,{children:":send_event"})," directly on a component instead of an object if we want."]}),"\n",(0,o.jsxs)(n.p,{children:["Below are the fields and functions on a ",(0,o.jsx)(n.code,{children:"Component"}),", such as ",(0,o.jsx)(n.code,{children:"self_component"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"id",children:".id"}),"\n",(0,o.jsxs)(n.p,{children:["Identifier for the component. Is a ",(0,o.jsx)(i,{name:"number"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"hash",children:".hash"}),"\n",(0,o.jsxs)(n.p,{children:["The hash of the component's definition. Is a ",(0,o.jsx)(i,{name:"string"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Make sure to use ",(0,o.jsx)(n.code,{children:":function()"})," and not ",(0,o.jsx)(n.code,{children:".function()"}),", or you'll get an error"]})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"destroy",children:":destroy()"}),"\n",(0,o.jsx)(n.p,{children:"Destroys this component, removing it from its parent object or attachment"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"is_destroyed",children:":is_destroyed()"}),"\n",(0,o.jsx)(n.p,{children:"Returns whether this component has been destroyed"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"get_property",children:":get_property()"}),"\n",(0,o.jsxs)(n.p,{children:["Gets a property value by ID. It is a table, and the value of the property will be in ",(0,o.jsx)(n.code,{children:".value"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"get_properties",children:":get_properties()"}),"\n",(0,o.jsx)(n.p,{children:"Gets all properties as a table"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"set_property",children:":set_property()"}),"\n",(0,o.jsx)(n.p,{children:'Sets a property value. It\'ll send_event with id "property_changed" and data being the property id.'}),"\n",(0,o.jsxs)(n.p,{children:["The way you should usually use this is, call ",(0,o.jsx)(n.code,{children:":get_property"})," and store the entire table, then just change the ",(0,o.jsx)(n.code,{children:"value"}),", and call this with that table."]}),"\n",(0,o.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local prop = self_component:get_property("jump_force");\nprop.value = 1;\nself_component:set_property("jump_force", prop);\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"send_event",children:":send_event()"}),"\n",(0,o.jsxs)(n.p,{children:["Sends an event to the component. It will call its ",(0,o.jsx)(n.code,{children:"on_event"}),". If it returns data, then this ",(0,o.jsx)(n.code,{children:"send_event"})," returns that. Conversely, if you call ",(0,o.jsx)(n.code,{children:"send_event"})," on an object, no data is returned."]}),"\n",(0,o.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'component:send_event("some_event_id", 3); -- second argument is the data. you can use almost anything as the data, other than functions\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8098:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/menu-22f446d530f706db58b636a9cdcbe8fe.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);