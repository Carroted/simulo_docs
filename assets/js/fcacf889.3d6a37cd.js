"use strict";(self.webpackChunksimulo_docs=self.webpackChunksimulo_docs||[]).push([[165],{6521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=n(4848),i=n(8453);const s={},r="Bolt",l={id:"api/joints/Bolt",title:"Bolt",description:"A bolt keeps 2 objects together, and prevents all relative movement or rotation between them. If you instead want a wobbly connection, use Fixed Joints.",source:"@site/docs/api/joints/Bolt.mdx",sourceDirName:"api/joints",slug:"/api/joints/Bolt",permalink:"/api/joints/Bolt",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Joints",permalink:"/api/joints/"},next:{title:"FixedJoint",permalink:"/api/joints/FixedJoint"}},d={},c=[{value:"Fields",id:"fields",level:2},{value:".id",id:"id",level:3},{value:"Functions",id:"functions",level:2},{value:":destroy()",id:"destroy",level:3},{value:":is_destroyed()",id:"is_destroyed",level:3},{value:":get_object_a()",id:"get_object_a",level:3},{value:":get_object_b()",id:"get_object_b",level:3},{value:":get_reference_angle()",id:"get_reference_angle",level:3},{value:":get_attachment()",id:"get_attachment",level:3},{value:":get_type()",id:"get_type",level:3}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",...(0,i.R)(),...e.components},{Type:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Type",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"bolt",children:"Bolt"}),"\n",(0,o.jsxs)(t.p,{children:["A bolt keeps 2 objects together, and prevents all relative movement or rotation between them. If you instead want a wobbly connection, use ",(0,o.jsx)(t.a,{href:"/api/joints/FixedJoint",children:"Fixed Joints"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["You can add these with ",(0,o.jsx)(t.code,{children:"Scene"}),"'s ",(0,o.jsx)(t.code,{children:"add_bolt"}),", but you are recommended to instead use the ",(0,o.jsxs)(t.a,{href:"/api/core",children:[(0,o.jsx)(t.code,{children:"core"})," ",(0,o.jsx)(t.code,{children:"bolt"})]})," function."]}),"\n",(0,o.jsxs)(t.p,{children:["If you use ",(0,o.jsx)(t.code,{children:"add_bolt"}),", you'll connect objects, but without a visible bolt attachment the user can remove. For example, the built-in Brush Tool creates brush strokes made of many capsule objects. If you select the result, you won't see any bolts, even invisible ones. Conversely, if you select a Simulon, you'll see some invisible attachments for its spring, bolt, and hinge."]}),"\n",(0,o.jsxs)(t.p,{children:["So, if you want to add a visible bolt the user can remove (even if you want it to be invisible), use ",(0,o.jsx)(t.code,{children:"core"}),"'s ",(0,o.jsx)(t.code,{children:"bolt"}),". Otherwise, you can use ",(0,o.jsx)(t.code,{children:"add_bolt"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The below functions concern returned bolt joints from ",(0,o.jsx)(t.code,{children:"add_bolt"}),", not ",(0,o.jsx)(t.code,{children:"core"}),"'s ",(0,o.jsx)(t.code,{children:"bolt"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"id",children:".id"}),"\n",(0,o.jsxs)(t.p,{children:["Identifier for the bolt. Is a ",(0,o.jsx)(n,{name:"number"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["Make sure to use ",(0,o.jsx)(t.code,{children:":function()"})," and not ",(0,o.jsx)(t.code,{children:".function()"}),", or you'll get an error"]})}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"destroy",children:":destroy()"}),"\n",(0,o.jsx)(t.p,{children:"Destroys the bolt."}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"is_destroyed",children:":is_destroyed()"}),"\n",(0,o.jsx)(t.p,{children:"Returns whether or not the bolt still exists."}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"get_object_a",children:":get_object_a()"}),"\n",(0,o.jsxs)(t.p,{children:["Gets the first object the bolt is attached to. Can be ",(0,o.jsx)(n,{name:"nil"})," if the bolt is connected to the world on that end."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"get_object_b",children:":get_object_b()"}),"\n",(0,o.jsxs)(t.p,{children:["Gets the second object the bolt is attached to. Can be ",(0,o.jsx)(n,{name:"nil"})," if the bolt is connected to the world on that end."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"get_reference_angle",children:":get_reference_angle()"}),"\n",(0,o.jsx)(t.p,{children:"Difference in angle between the two"}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"get_attachment",children:":get_attachment()"}),"\n",(0,o.jsxs)(t.p,{children:["Returns the attachment of the bolt as a ",(0,o.jsx)(n,{name:"attachment"}),". Can be ",(0,o.jsx)(n,{name:"nil"}),"."]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"get_type",children:":get_type()"}),"\n",(0,o.jsxs)(t.p,{children:['Returns "bolt". Mainly used after ',(0,o.jsx)(t.code,{children:"object:get_joints()"})," to determine what type of joint it is."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);